
spring:
  #application name
  application:
    name: ${CUSTOMER_APPLICATION_NAME}
    # disable logo in logs
  main:
    banner-mode: off
    # database configuration
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${DATABASE_HOSTNAME}:${DATABASE_HOST_PORT}/${CUSTOMER_DATABASE}
    username: ${DATABASE_ROOT_USER}
    password: ${DATABASE_ROOT_PWD}
  # disable JPA auto creation because using flyway
  jpa:
    hibernate:
      ddl-auto: none
  # flyway config
  flyway:
    baseline-on-migrate: true
    validate-on-migrate: true
    enabled: true
    user: ${DATABASE_ROOT_USER}
    password: ${DATABASE_ROOT_PWD}
  # kafka producer config, each writing request is published as an event in kafka infra
  kafka:
    producer:
      bootstrap-servers: http://kafka-server1:19092,http://kafka-server2:29092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        spring:
          json:
            add:
              type:
                headers: false
    # schema registry config to define a common model of event for kafka producer and kafka consumer
    properties:
      schema:
        registry:
          url: http://localhost:8081
  # security config: urls for Keycloak authentication provider
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER}
          jwk-set-uri: ${JWT_ISSUER}/protocol/openid-connect/certs
# keycloak client id
jwt:
  oauth:
    converter:
      client-id: ${CUSTOMER_KEYCLOAK_CLIENT_ID}
      principal-attribute: preferred_username
# kafka topic configuration: duration time and size of message, topic partitions and topic replicas
kafka:
  topic-config:
    name: ${KAFKA_TOPIC_NAME}
    retention:
      duration: ${KAFKA_TOPIC_RETENTION_DURATION} # one hour
      size: ${KAFKA_TOPIC_RETENTION_SIZE} # 0.5 MB
      clean-up-policy: ${KAFKA_TOPIC_RETENTION_CLEANUP_POLICY}
    topic-partitions: ${KAFKA_TOPIC_PARTITIONS}
    topic-replicas: ${KAFKA_TOPIC_REPLICAS}

server:
  port: ${CUSTOMER_SERVER_PORT}

# welcoming message
application:
  welcome-message: welcome to customer management application
  managed-operations:
    operation1: create a customer
    operation2: list all existing customers
    operation3: archive a customer
    operation4: and so off

# atcuator config, to be used by K8s for healthcheck
management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-components: always
      probes:
        enabled: true # enable /actuator/health/liveness and /actuator/health/readiness for K8s
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
# eureka server for microservices registration (for testing, it will be removed when deploying into k8s)
eureka:
  client:
    service-url:
      defaultZone: http://${SERVICE_REGISTRY_APPLICATION_NAME}:${SERVICE_REGISTRY_SERVER_PORT}/eureka/

